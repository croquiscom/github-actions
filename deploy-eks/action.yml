name: deploy to eks

inputs:
  deployment_uuid:
    description: 배포 UUID
    default: ''
    type: string
  release_message:
    description: 릴리즈 메시지
    default: ''
    type: string
  image_tag:
    description: 배포할 이미지
    required: true
    type: string
  user_name:
    description: 배포한 사용자
    required: false
    type: string
  stage:
    description: 스테이지
    type: string
  service_name:
    description: 서비스 이름
    required: true
    type: string
  service_name_istio:
    description: 서비스 이름
    required: false
    type: string
  branch:
    description: 브랜치
    type: string
  git_ref:
    description: 커밋
    type: string
  slack_notify_channel:
    description: 슬랙 알림 채널
    required: true
    type: string
  slack_thread_key:
    description: 슬랙 메시지 갱신을 위한 키
    type: string
  change_image_yq_command:
    type: string
  GITHUB_BOT_TOKEN:
    required: true
  RECORD_DEPLOYMENT_STEP_URL:
    required: true
  RECORD_DEPLOYMENT_STEP_TOKEN:
    required: true

runs:
  using: 'composite'
  steps:
    - name: Show inputs
      env:
        OUTPUTS: ${{ toJSON(inputs) }}
      shell: bash
      run: echo $OUTPUTS

    - name: Notify deploy start
      shell: bash
      run: |
        curl -X POST "${{ inputs.RECORD_DEPLOYMENT_STEP_URL }}" -H 'Authorization: Bearer ${{ inputs.RECORD_DEPLOYMENT_STEP_TOKEN }}' -H 'Content-Type: application/json' --data-raw '
          {
            "step": "deploy_start", "user_name": "${{ inputs.user_name }}", "actor": "${{ github.actor }}",
            "deployment_uuid": "${{ inputs.deployment_uuid }}", "github_workflow_run_id": "${{ github.run_id }}",
            "release_message": ${{ toJSON(inputs.release_message) }}, "image_tag": "${{ inputs.image_tag }}",
            "slack_thread_key": "${{ inputs.slack_thread_key }}", "slack_notify_channel": "${{ inputs.slack_notify_channel }}",
            "stage": "${{ inputs.stage }}", "service_name": "${{ inputs.service_name }}", "branch": "${{ inputs.branch }}", "git_ref": "${{ inputs.git_ref }}"
          }
        '

    - name: Clone deploy reposiory
      uses: actions/checkout@v3
      with:
        repository: croquiscom/zigzag-deploy
        ref: 'main'
        token: ${{ inputs.GITHUB_BOT_TOKEN }}

    - name: Change image tag for istio
      uses: croquiscom/github-actions/yq@main
      if: inputs.change_image_yq_command == ''
      with:
        cmd: yq e --inplace '.image.tag = "${{ inputs.image_tag }}"' services-istio/${{ inputs.service_name_istio || inputs.service_name }}/values-${{ inputs.stage }}.yaml

    - name: Change image tag
      uses: croquiscom/github-actions/yq@main
      if: inputs.change_image_yq_command != ''
      with:
        cmd: ${{ inputs.change_image_yq_command }}

    - name: Commit and Push
      shell: bash
      run: |
        git config user.email "sre-croquis@users.noreply.github.com"
        git config user.name "sre-croquis"
        git commit -a \
          -m 'deploy: ${{ inputs.stage }}-zigzag-${{ inputs.service_name }}-${{ inputs.image_tag }}' \
          || { echo "No changes"; exit 100; }
        git push && { echo "Success"; exit 0; }
        sleep $((RANDOM % 4))
        git fetch && git rebase origin/main
        git push && { echo "Success"; exit 0; }
        sleep $((RANDOM % 10))
        git fetch && git rebase origin/main
        git push && { echo "Success"; exit 0; }
        sleep $((RANDOM % 20))
        git fetch && git rebase origin/main
        git push && { echo "Success"; exit 0; } || { echo "Failed"; exit 200; }

    - name: Notify deploy success
      if: success()
      shell: bash
      run: |
        curl -X POST "${{ inputs.RECORD_DEPLOYMENT_STEP_URL }}" -H 'Authorization: Bearer ${{ inputs.RECORD_DEPLOYMENT_STEP_TOKEN }}' -H 'Content-Type: application/json' --data-raw '
          {
            "step": "deploy_success", "user_name": "${{ inputs.user_name }}", "actor": "${{ github.actor }}",
            "deployment_uuid": "${{ inputs.deployment_uuid }}", "github_workflow_run_id": "${{ github.run_id }}",
            "release_message": ${{ toJSON(inputs.release_message) }}, "image_tag": "${{ inputs.image_tag }}",
            "slack_thread_key": "${{ inputs.slack_thread_key }}", "slack_notify_channel": "${{ inputs.slack_notify_channel }}",
            "stage": "${{ inputs.stage }}", "service_name": "${{ inputs.service_name }}", "branch": "${{ inputs.branch }}", "git_ref": "${{ inputs.git_ref }}"
          }
        '
        curl -X POST "${{ inputs.RECORD_DEPLOYMENT_STEP_URL }}" -H 'Authorization: Bearer ${{ inputs.RECORD_DEPLOYMENT_STEP_TOKEN }}' -H 'Content-Type: application/json' --data-raw '
          {
            "step": "argocd_sync_ready", "image_tag": "${{ inputs.image_tag }}",
            "stage": "${{ inputs.stage }}", "service_name": "${{ inputs.service_name }}"
          }
        '

    - name: Notify deploy fail
      if: failure()
      shell: bash
      run: |
        curl -X POST "${{ inputs.RECORD_DEPLOYMENT_STEP_URL }}" -H 'Authorization: Bearer ${{ inputs.RECORD_DEPLOYMENT_STEP_TOKEN }}' -H 'Content-Type: application/json' --data-raw '
          {
            "step": "deploy_fail", "user_name": "${{ inputs.user_name }}", "actor": "${{ github.actor }}",
            "deployment_uuid": "${{ inputs.deployment_uuid }}", "github_workflow_run_id": "${{ github.run_id }}",
            "release_message": ${{ toJSON(inputs.release_message) }}, "image_tag": "${{ inputs.image_tag }}",
            "slack_thread_key": "${{ inputs.slack_thread_key }}", "slack_notify_channel": "${{ inputs.slack_notify_channel }}",
            "stage": "${{ inputs.stage }}", "service_name": "${{ inputs.service_name }}", "branch": "${{ inputs.branch }}", "git_ref": "${{ inputs.git_ref }}"
          }
        '

name: build server service and push to ecr

on:
  workflow_call:
    inputs:
      working_directory:
        description: 작업 디렉토리
        default: '.'
        type: string
      production_branch:
        description: 운영 환경 배포를 하는 브랜치
        required: true
        type: string
      user_name:
        description: 배포한 사용자
        required: true
        type: string
      stage:
        description: 스테이지
        required: true
        type: string
      branch:
        description: 브랜치
        required: true
        type: string
      service_name:
        description: 서비스 이름
        required: true
        type: string
      service_port:
        description: 서비스 포트
        required: true
        type: string
      repository_name:
        description: 이미지를 올릴 ECR 이름
        required: true
        type: string
      dockerfile_path:
        description: Dockerfile 경로
        required: true
        type: string
      slack_notify_channel:
        description: 슬랙 알림 채널
        required: true
        type: string
      slack_thread_key:
        description: 슬랙 메시지 갱신을 위한 키
        required: true
        type: string
    secrets:
      AWS_ACCESS_KEY:
        required: true
      AWS_SECRET_KEY:
        required: true
      SSH_PRIVATE_KEY:
        required: true
      SLACK_POST_MESSAGE_URL:
        required: true
      SLACK_POST_MESSAGE_TOKEN:
        required: true
    outputs:
      git_ref:
        value: ${{ jobs.build.outputs.git_ref }}
      image:
        value: ${{ jobs.build.outputs.image }}
      image_tag:
        value: ${{ jobs.build.outputs.image_tag }}

jobs:
  check:
    uses: croquiscom/github-actions/.github/workflows/check-branch-up-to-date.yml@main
    with:
      required_branch: ${{ inputs.production_branch }}

  build:
    name: build ${{ inputs.branch }} to ${{ inputs.stage }}
    needs: check
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Check branch is production branch (production)
        run: exit 255
        if: (inputs.stage == 'production' || inputs.stage == 'beta-rc') && inputs.branch != inputs.production_branch

      - name: Notify build start
        run: |
          curl -X POST "${{ secrets.SLACK_POST_MESSAGE_URL }}" -H 'Authorization: Bearer ${{ secrets.SLACK_POST_MESSAGE_TOKEN }}' -H 'Content-Type: application/json' --data-raw '
            {
              "thread_key": "${{ inputs.slack_thread_key }}",
              "channel": "${{ inputs.slack_notify_channel }}",
              "text": "*[${{ inputs.stage }}] ${{ inputs.service_name }} 배포 알림*",
              "attachments": [
                {
                  "color": "#36C5F0",
                  "blocks": [
                    {
                      "type": "section",
                      "fields": [
                        { "type": "mrkdwn", "text": "*배포상태:*\n이미지 빌드 시작" },
                        { "type": "mrkdwn", "text": "*브랜치:*\n${{ inputs.branch }}" },
                        { "type": "mrkdwn", "text": "*요청자:*\n${{ inputs.user_name }}" }
                      ]
                    }
                  ]
                }
              ]
            }
          '

      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: ${{ inputs.branch }}

      - name: Get variables
        id: var
        run: |
          cd ${{ inputs.working_directory }}
          GIT_REF=`git rev-parse HEAD`
          DATE=$(TZ=Asia/Seoul date +%Y%m%d-%H%M)
          DEPLOY_VERSION=$(TZ=Asia/Seoul date +%Y.%m%d.%H%M)-${GIT_REF:0:6}
          echo "::set-output name=git_ref::$GIT_REF"
          echo "::set-output name=date::$DATE"
          echo "::set-output name=image_tag::$DATE-${GIT_REF:0:10}"
          echo "::set-output name=deploy_version::$DEPLOY_VERSION"
          perl -pi -e "s|\"version\": \".*\"|\"version\": \"$DEPLOY_VERSION\"|" package.json || echo not Node.js project

      - name: Notify build start with commit
        env:
          GIT_REF: ${{ steps.var.outputs.git_ref }}
        run: |
          curl -X POST "${{ secrets.SLACK_POST_MESSAGE_URL }}" -H 'Authorization: Bearer ${{ secrets.SLACK_POST_MESSAGE_TOKEN }}' -H 'Content-Type: application/json' --data-raw '
            {
              "thread_key": "${{ inputs.slack_thread_key }}",
              "channel": "${{ inputs.slack_notify_channel }}",
              "text": "*[${{ inputs.stage }}] ${{ inputs.service_name }} 배포 알림*",
              "attachments": [
                {
                  "color": "#36C5F0",
                  "blocks": [
                    {
                      "type": "section",
                      "fields": [
                        { "type": "mrkdwn", "text": "*배포상태:*\n이미지 빌드 시작" },
                        { "type": "mrkdwn", "text": "*브랜치:*\n${{ inputs.branch }}" },
                        { "type": "mrkdwn", "text": "*요청자:*\n${{ inputs.user_name }}" },
                        { "type": "mrkdwn", "text": "*커밋:*\n${{ env.GIT_REF }}" }
                      ]
                    }
                  ]
                }
              ]
            }
          '

      - name: Get SSH KEY
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        run: |
          cd ${{ inputs.working_directory }}
          echo "$SSH_PRIVATE_KEY" > ./ssh_private_key && chmod 600 ./ssh_private_key

      - name: Configure AWS credentialsn for push to ECR
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
          aws-region: ap-northeast-2
          mask-aws-account-id: false

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Copy Dockerfile
        run: |
          cd ${{ inputs.working_directory }}
          cp ${{ inputs.dockerfile_path }} Dockerfile

      - name: Build, tag, and push image to Amazon ECR
        id: build
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ inputs.repository_name }}
          IMAGE_TAG: ${{ steps.var.outputs.image_tag }}
          DEPLOY_REF: ${{ steps.var.outputs.git_ref }}
          DEPLOY_TIME: ${{ steps.var.outputs.date }}
          DEPLOY_VERSION: ${{ steps.var.outputs.deploy_version }}
          PORT: ${{ inputs.service_port }}
          STAGE: ${{ inputs.stage }}
          SERVICE_NAME: ${{ inputs.service_name }}
          USER: ${{ inputs.user_name }}
        run: |
          cd ${{ inputs.working_directory }}
          tar ch --exclude node_modules --exclude test --exclude tools --exclude *.test.ts* \
            --exclude *.stories.tsx --exclude .storybook . |
            DOCKER_BUILDKIT=1 docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -t $ECR_REGISTRY/$ECR_REPOSITORY:latest \
            --ssh default=./ssh_private_key \
            --build-arg STAGE=$STAGE --build-arg PORT=$PORT --build-arg SERVICE_NAME=$SERVICE_NAME \
            --build-arg DEPLOY_REF=$DEPLOY_REF --build-arg DEPLOY_USER=$USER \
            --build-arg DEPLOY_TIME=$DEPLOY_TIME --build-arg DEPLOY_VERSION=$DEPLOY_VERSION \
            -
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

      - name: Notify build success
        if: success()
        env:
          GIT_REF: ${{ steps.var.outputs.git_ref }}
        run: |
          curl -X POST "${{ secrets.SLACK_POST_MESSAGE_URL }}" -H 'Authorization: Bearer ${{ secrets.SLACK_POST_MESSAGE_TOKEN }}' -H 'Content-Type: application/json' --data-raw '
            {
              "thread_key": "${{ inputs.slack_thread_key }}",
              "channel": "${{ inputs.slack_notify_channel }}",
              "text": "*[${{ inputs.stage }}] ${{ inputs.service_name }} 배포 알림*",
              "attachments": [
                {
                  "color": "#2EB67D",
                  "blocks": [
                    {
                      "type": "section",
                      "fields": [
                        { "type": "mrkdwn", "text": "*배포상태:*\n이미지 빌드 성공" },
                        { "type": "mrkdwn", "text": "*브랜치:*\n${{ inputs.branch }}" },
                        { "type": "mrkdwn", "text": "*요청자:*\n${{ inputs.user_name }}" },
                        { "type": "mrkdwn", "text": "*커밋:*\n${{ env.GIT_REF }}" }
                      ]
                    }
                  ]
                }
              ]
            }
          '

      - name: Notify build fail
        if: failure()
        env:
          GIT_REF: ${{ steps.var.outputs.git_ref }}
        run: |
          curl -X POST "${{ secrets.SLACK_POST_MESSAGE_URL }}" -H 'Authorization: Bearer ${{ secrets.SLACK_POST_MESSAGE_TOKEN }}' -H 'Content-Type: application/json' --data-raw '
            {
              "thread_key": "${{ inputs.slack_thread_key }}",
              "channel": "${{ inputs.slack_notify_channel }}",
              "text": "*[${{ inputs.stage }}] ${{ inputs.service_name }} 배포 알림*",
              "attachments": [
                {
                  "color": "#E01E5A",
                  "blocks": [
                    {
                      "type": "section",
                      "fields": [
                        { "type": "mrkdwn", "text": "*배포상태:*\n이미지 빌드 실패" },
                        { "type": "mrkdwn", "text": "*브랜치:*\n${{ inputs.branch }}" },
                        { "type": "mrkdwn", "text": "*요청자:*\n${{ inputs.user_name }}" },
                        { "type": "mrkdwn", "text": "*커밋:*\n${{ env.GIT_REF }}" }
                      ]
                    }
                  ]
                }
              ]
            }
          '

    outputs:
      git_ref: ${{ steps.var.outputs.git_ref }}
      image: ${{ steps.build.outputs.image }}
      image_tag: ${{ steps.var.outputs.image_tag }}

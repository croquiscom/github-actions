name: build server service and push to ecr

on:
  workflow_call:
    inputs:
      deployment_uuid:
        description: 배포 UUID
        default: ''
        type: string
      working_directory:
        description: 작업 디렉토리
        default: '.'
        type: string
      production_branch:
        description: 운영 환경 배포를 하는 브랜치
        required: true
        type: string
      user_name:
        description: 배포한 사용자
        required: true
        type: string
      stage:
        description: 스테이지
        required: true
        type: string
      branch:
        description: 브랜치
        required: true
        type: string
      service_name:
        description: 서비스 이름
        required: true
        type: string
      service_port:
        description: 서비스 포트
        required: true
        type: string
      repository_name:
        description: 이미지를 올릴 ECR 이름
        required: true
        type: string
      dockerfile_path:
        description: Dockerfile 경로
        required: true
        type: string
      slack_notify_channel:
        description: 슬랙 알림 채널
        required: true
        type: string
      slack_thread_key:
        description: 슬랙 메시지 갱신을 위한 키
        required: true
        type: string
    secrets:
      AWS_ACCESS_KEY:
        required: true
      AWS_SECRET_KEY:
        required: true
      SSH_PRIVATE_KEY:
        required: true
      RECORD_DEPLOYMENT_STEP_URL:
        required: true
      RECORD_DEPLOYMENT_STEP_TOKEN:
        required: true
    outputs:
      git_ref:
        value: ${{ jobs.build.outputs.git_ref }}
      image:
        value: ${{ jobs.build.outputs.image }}
      image_tag:
        value: ${{ jobs.build.outputs.image_tag }}

jobs:
  build:
    name: build ${{ inputs.branch }} to ${{ inputs.stage }}
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Check branch is production branch (production)
        run: exit 255
        if: (inputs.stage == 'production' || inputs.stage == 'beta-rc') && inputs.branch != inputs.production_branch

      - name: Notify build start
        run: |
          curl -X POST "${{ secrets.RECORD_DEPLOYMENT_STEP_URL }}" -H 'Authorization: Bearer ${{ secrets.RECORD_DEPLOYMENT_STEP_TOKEN }}' -H 'Content-Type: application/json' --data-raw '
            {
              "step": "build_start", "user_name": "${{ inputs.user_name }}", "actor": "${{ github.actor }}",
              "deployment_uuid": "${{ inputs.deployment_uuid }}", "github_workflow_run_id": "${{ github.run_id }}",
              "slack_thread_key": "${{ inputs.slack_thread_key }}", "slack_notify_channel": "${{ inputs.slack_notify_channel }}",
              "stage": "${{ inputs.stage }}", "service_name": "${{ inputs.service_name }}", "branch": "${{ inputs.branch }}", "git_ref": ""
            }
          '

      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: ${{ inputs.branch }}

      - name: Build
        id: build
        uses: croquiscom/github-actions/build-server-service@main
        with:
          deployment_uuid: ${{ inputs.deployment_uuid }}
          working_directory: ${{ inputs.working_directory }}
          production_branch: ${{ inputs.production_branch }}
          user_name: ${{ inputs.user_name }}
          stage: ${{ inputs.stage }}
          branch: ${{ inputs.branch }}
          service_name: ${{ inputs.service_name }}
          service_port: ${{ inputs.service_port }}
          repository_name: ${{ inputs.repository_name }}
          dockerfile_path: ${{ inputs.dockerfile_path }}
          slack_notify_channel: ${{ inputs.slack_notify_channel }}
          slack_thread_key: ${{ inputs.slack_thread_key }}
          AWS_ACCESS_KEY: ${{ secrets.AWS_ACCESS_KEY }}
          AWS_SECRET_KEY: ${{ secrets.AWS_SECRET_KEY }}
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          RECORD_DEPLOYMENT_STEP_URL: ${{ secrets.RECORD_DEPLOYMENT_STEP_URL }}
          RECORD_DEPLOYMENT_STEP_TOKEN: ${{ secrets.RECORD_DEPLOYMENT_STEP_TOKEN }}

    outputs:
      git_ref: ${{ steps.build.outputs.git_ref }}
      image: ${{ steps.build.outputs.image }}
      image_tag: ${{ steps.build.outputs.image_tag }}

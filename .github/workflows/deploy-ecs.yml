name: deploy to ecs

on:
  workflow_call:
    inputs:
      image:
        description: 배포할 이미지
        required: true
        type: string
      stage:
        description: 스테이지
        type: string
      cluster_name:
        description: 클러스터 이름
        required: true
        type: string
      service_name:
        description: 서비스 이름
        required: true
        type: string
      task_definition_name:
        description: 태스크 정의 파일 이름
        required: true
        type: string
      branch:
        description: 브랜치
        type: string
      git_ref:
        description: 커밋
        type: string
      slack_notify_channel:
        description: 슬랙 알림 채널
        required: true
        type: string
      slack_thread_key:
        description: 슬랙 메시지 갱신을 위한 키
        type: string
    secrets:
      AWS_ACCESS_KEY:
        required: true
      AWS_SECRET_KEY:
        required: true
      SLACK_POST_MESSAGE_URL:
        required: true
      SLACK_POST_MESSAGE_TOKEN:
        required: true

jobs:
  deploy:
    name: deploy ${{ inputs.branch }} to ${{ inputs.stage }}
    runs-on: ubuntu-latest
    timeout-minutes: 20

    steps:
      - name: Notify deploy start
        run: |
          curl -X POST "${{ secrets.SLACK_POST_MESSAGE_URL }}" -H 'Authorization: Bearer ${{ secrets.SLACK_POST_MESSAGE_TOKEN }}' -H 'Content-Type: application/json' --data-raw '
            {
              "thread_key": "${{ inputs.slack_thread_key }}",
              "channel": "${{ inputs.slack_notify_channel }}",
              "text": "*[${{ inputs.stage }}] ${{ inputs.service_name }} 배포 알림*",
              "attachments": [
                {
                  "color": "#36C5F0",
                  "blocks": [
                    {
                      "type": "section",
                      "fields": [
                        { "type": "mrkdwn", "text": "*배포상태:*\n이미지 배포 시작" },
                        { "type": "mrkdwn", "text": "*브랜치:*\n${{ inputs.branch }}" },
                        { "type": "mrkdwn", "text": "*요청자:*\n${{ inputs.user_name }}" },
                        { "type": "mrkdwn", "text": "*커밋:*\n${{ inputs.git_ref }}" }
                      ]
                    }
                  ]
                }
              ]
            }
          '

      - name: Configure AWS credentialsn for deploying
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
          aws-region: ap-northeast-2

      - name: Download task definition
        env:
          TASK_DEFINITION_NAME: ${{ inputs.task_definition_name }}
        run: |
          aws ecs describe-task-definition --task-definition $TASK_DEFINITION_NAME --query taskDefinition > task-definition.json

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition.json
          container-name: ${{ inputs.task_definition_name }}
          image: ${{ inputs.image }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ inputs.service_name }}
          cluster: ${{ inputs.cluster_name }}
          wait-for-service-stability: true

      - name: Notify deploy success
        if: success()
        run: |
          curl -X POST "${{ secrets.SLACK_POST_MESSAGE_URL }}" -H 'Authorization: Bearer ${{ secrets.SLACK_POST_MESSAGE_TOKEN }}' -H 'Content-Type: application/json' --data-raw '
            {
              "thread_key": "${{ inputs.slack_thread_key }}",
              "channel": "${{ inputs.slack_notify_channel }}",
              "text": "*[${{ inputs.stage }}] ${{ inputs.service_name }} 배포 알림*",
              "attachments": [
                {
                  "color": "#2EB67D",
                  "blocks": [
                    {
                      "type": "section",
                      "fields": [
                        { "type": "mrkdwn", "text": "*배포상태:*\n이미지 배포 성공" },
                        { "type": "mrkdwn", "text": "*브랜치:*\n${{ inputs.branch }}" },
                        { "type": "mrkdwn", "text": "*요청자:*\n${{ inputs.user_name }}" },
                        { "type": "mrkdwn", "text": "*커밋:*\n${{ inputs.git_ref }}" }
                      ]
                    }
                  ]
                }
              ]
            }
          '

      - name: Notify deploy fail
        if: failure()
        run: |
          curl -X POST "${{ secrets.SLACK_POST_MESSAGE_URL }}" -H 'Authorization: Bearer ${{ secrets.SLACK_POST_MESSAGE_TOKEN }}' -H 'Content-Type: application/json' --data-raw '
            {
              "thread_key": "${{ inputs.slack_thread_key }}",
              "channel": "${{ inputs.slack_notify_channel }}",
              "text": "*[${{ inputs.stage }}] ${{ inputs.service_name }} 배포 알림*",
              "attachments": [
                {
                  "color": "#E01E5A",
                  "blocks": [
                    {
                      "type": "section",
                      "fields": [
                        { "type": "mrkdwn", "text": "*배포상태:*\n이미지 배포 실패" },
                        { "type": "mrkdwn", "text": "*브랜치:*\n${{ inputs.branch }}" },
                        { "type": "mrkdwn", "text": "*요청자:*\n${{ inputs.user_name }}" },
                        { "type": "mrkdwn", "text": "*커밋:*\n${{ inputs.git_ref }}" }
                      ]
                    }
                  ]
                }
              ]
            }
          '
